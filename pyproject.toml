[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "scikit_build_core"
authors = [
    { name = "Henry Schreiner", email = "henryfs@princeton.edu" },
]
description = "PEP 517 builder for Scikit-Build"
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 1 - Planning",
]

dynamic = ["version"]

dependencies = [
    "exceptiongroup; python_version<'3.11'",
    "packaging",  # TODO: set a min version
    "tomli; python_version<'3.11'",
    "typing_extensions >=3.7; python_version<'3.8'",
]

[project.optional-dependencies]
test = [
    "build",
    "cattrs >=22.2.0",
    "cmake >=3.15",
    "distlib",
    "ninja",
    "pathspec",
    "pybind11",
    "pyproject-metadata",
    "pytest >=7",
    "pytest-subprocess",
    "pytest-virtualenv",
    "rich",
    "setuptools",
    "wheel",
]
cov = [
    "pytest-cov[toml]",
]
dev = [
    "build",
    "cattrs >=22.2.0",
    "pytest >=7",
    "pytest-subprocess",
    "pytest-virtualenv",
    "rich",
]
docs = [
    "furo",
    "myst_parser >=0.13",
    "sphinx >=4.0",
    "sphinx_copybutton",
]

[project.urls]
homepage = "https://github.com/scikit-build/scikit-build-core"


[tool.hatch]
version.path = "src/scikit_build_core/__init__.py"


[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config", "--tb=native"]
xfail_strict = true
filterwarnings = [
    "error",
    "ignore:Config variable '.*' is unset, Python ABI tag may be incorrect:RuntimeWarning",
]
log_cli_level = "info"
testpaths = ["tests"]
markers = [
    "compile: Compiles code",
    "configure: Configures CMake code",
    "integration: Full package build",
]


[tool.mypy]
files = "src"
python_version = "3.7"
warn_unused_configs = true
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["distlib.*", "pathspec"]
ignore_missing_imports = true


[tool.isort]
profile = "black"


[tool.pylint]
master.py-version = "3.7"
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
good-names = ["f",]
messages_control.disable = [
  "design",
  "fixme",
  "import-outside-toplevel",
  "invalid-name",
  "line-too-long",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "wrong-import-position",
  "unnecessary-ellipsis",  # Conflicts with Protocols
  "broad-except",
]


[tool.coverage]
report.exclude_lines = [
  "pragma: no cover",
  '\.\.\.',
]
